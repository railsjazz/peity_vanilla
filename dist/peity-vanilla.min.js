/*!
  Peity Vanila JS 0.0.8
  Copyright Â© 2024 RailsJazz
  https://railsjazz.com
 */
var peity=function(){"use strict";const t=t=>null!==t&&"function"==typeof t&&!!t.apply,e=(t,e)=>{const i=document.createElementNS("http://www.w3.org/2000/svg",t);for(var s in e)i.setAttribute(s,e[s]);return i},i="createElementNS"in document&&e("svg",{}).createSVGRect();class s{static defaults={};static graphers={};constructor(t,e,i={}){this.element=t,this.type=e,this.options=Object.assign({},s.defaults[this.type],JSON.parse(t.dataset.peity||"{}"),i),this.element._peity&&this.element._peity.destroy(),this.element._peity=this}draw(){const e=this.options;s.graphers[this.type](this),t(e.after)&&e.after.call(this,e)}fill(){var e=this.options.fill;return t(e)?e:function(t,i){return e[i%e.length]}}prepare(t,i){return this.svg||(this.element.style.display="none",this.element.after(this.svg=e("svg",{class:"peity"}))),this.svg.innerHTML="",this.svg.setAttribute("width",t),this.svg.setAttribute("height",i),this.svg}get values(){return this.element.innerText.split(this.options.delimiter).map((t=>parseFloat(t)))}mount(){if(!i)return;this.observer=new MutationObserver(this.draw.bind(this));this.observer.observe(this.element,{attributes:!0,childList:!0,subtree:!0}),this.draw(),this.mounted=!0}unmount(){this.observer&&this.observer.disconnect(),this.svg.remove(),this.mounted=!1}destroy(){this.unmount(),delete this.element._peity}static register(t,e,i){s.defaults[t]=e,s.graphers[t]=i}}const n=t=>{if(!t.options.delimiter){const e=t.element.innerText.match(/[^0-9\.]/);t.options.delimiter=e?e[0]:","}let i=t.values.map((t=>t>0?t:0));if("/"==t.options.delimiter){let t=i[0],e=i[1];i=[t,Math.max(0,e-t)]}let s=0,n=i.length,o=0;for(;s<n;s++)o+=i[s];o||(n=2,o=1,i=[0,1]);let l=2*t.options.radius;const r=t.prepare(t.options.width||l,t.options.height||l),a=r.clientWidth,h=r.clientHeight,p=a/2,c=h/2,d=Math.min(p,c);let u=t.options.innerRadius;"donut"!=t.type||u||(u=.5*d);const m=t.fill(),f=(t,e)=>{const i=t/o*Math.PI*2-Math.PI/2;return[e*Math.cos(i)+p,e*Math.sin(i)+c]};let g=0;for(s=0;s<n;s++){const n=i[s],l=n/o;let a;if(0!=l){if(1==l)if(u){const t=p-.01,i=c-d,s=c-u;a=e("path",{d:["M",p,i,"A",d,d,0,1,1,t,i,"L",t,s,"A",u,u,0,1,0,p,s].join(" "),"data-value":n})}else a=e("circle",{cx:p,cy:c,"data-value":n,r:d});else{const t=g+n;let i=["M"].concat(f(g,d),"A",d,d,0,l>.5?1:0,1,f(t,d),"L");u?i=i.concat(f(t,u),"A",u,u,0,l>.5?1:0,0,f(g,u)):i.push(p,c),g+=n,a=e("path",{d:i.join(" "),"data-value":n})}a.setAttribute("fill",m.call(t,n,s,i)),r.append(a)}}},o={fill:["#ff9900","#fff4dd","#ffc66e"],radius:8};s.register("pie",o,n),s.register("donut",o,n),s.register("bar",{delimiter:",",fill:["#4D89F9"],height:16,min:0,padding:.1,width:32},(t=>{const i=t.values,s=Math.max.apply(Math,null==t.options.max?i:i.concat(t.options.max)),n=Math.min.apply(Math,null==t.options.min?i:i.concat(t.options.min)),o=t.prepare(t.options.width,t.options.height),l=o.clientWidth,r=o.clientHeight,a=s-n,h=t.options.padding,p=t.fill(),c=t=>t*l/i.length,d=t=>r-(a?(t-n)/a*r:1);for(var u=0;u<i.length;u++){let l,r=c(u+h),m=c(u+1-h)-r,f=i[u],g=d(f),v=g,y=g;a?f<0?v=d(Math.min(s,0)):y=d(Math.max(n,0)):l=1,l=y-v,0==l&&(l=1,s>0&&a&&v--),o.append(e("rect",{"data-value":f,fill:p.call(t,f,u,i),x:r,y:v,width:m,height:l}))}})),s.register("line",{delimiter:",",fill:"#c6d9fd",height:16,min:0,stroke:"#4d89f9",strokeWidth:1,width:32},(t=>{const i=t.values;1==i.length&&i.push(i[0]);const s=Math.max.apply(Math,null==t.options.max?i:i.concat(t.options.max)),n=Math.min.apply(Math,null==t.options.min?i:i.concat(t.options.min)),o=t.prepare(t.options.width,t.options.height),l=t.options.strokeWidth,r=o.clientWidth,a=o.clientHeight-l,h=s-n,p=t=>{let e=a;return h&&(e-=(t-n)/h*a),e+l/2};let c=p(Math.max(n,0)),d=[0,c];for(var u=0;u<i.length;u++)d.push(u*(r/(i.length-1)),p(i[u]));d.push(r,c),t.options.fill&&o.append(e("polygon",{fill:t.options.fill,points:d.join(" ")})),l&&o.append(e("polyline",{fill:"none",points:d.slice(2,d.length-2).join(" "),stroke:t.options.stroke,"stroke-width":l,"stroke-linecap":"square"}))}));const l=function(t,e,i){const n=new s(t,e,i);return n.mount(),n};return l.defaults=s.defaults,l.graphers=s.graphers,l}();
